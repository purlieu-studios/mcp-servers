"""EF Core migration generator."""

import asyncio
from pathlib import Path
from typing import Any, Dict, List
from datetime import datetime


class MigrationAnalyzer:
    """Generate EF Core migrations."""

    async def generate_migration(
        self,
        old_model_path: Path,
        new_model_path: Path,
        migration_name: str
    ) -> str:
        """Generate migration code based on model changes."""
        if not old_model_path.exists():
            raise FileNotFoundError(f"Old model file not found: {old_model_path}")
        if not new_model_path.exists():
            raise FileNotFoundError(f"New model file not found: {new_model_path}")

        # Read both models
        old_content = old_model_path.read_text(encoding='utf-8')
        new_content = new_model_path.read_text(encoding='utf-8')

        # Detect changes (simplified)
        changes = self._detect_changes(old_content, new_content)

        # Generate migration code
        migration_code = self._generate_migration_code(migration_name, changes)

        return migration_code

    def _detect_changes(self, old_content: str, new_content: str) -> Dict[str, List[str]]:
        """Detect changes between old and new models."""
        import re

        changes = {
            "added_properties": [],
            "removed_properties": [],
            "modified_properties": [],
            "added_indexes": [],
            "removed_indexes": []
        }

        # Extract properties from both
        old_props = set(re.findall(r'public\s+\w+\s+(\w+)\s*{\s*get;\s*set;\s*}', old_content))
        new_props = set(re.findall(r'public\s+\w+\s+(\w+)\s*{\s*get;\s*set;\s*}', new_content))

        changes["added_properties"] = list(new_props - old_props)
        changes["removed_properties"] = list(old_props - new_props)

        return changes

    def _generate_migration_code(self, migration_name: str, changes: Dict[str, List[str]]) -> str:
        """Generate the migration class code."""
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")

        up_operations = []
        down_operations = []

        # Generate operations for added properties
        for prop in changes["added_properties"]:
            up_operations.append(f'''
            migrationBuilder.AddColumn<string>(
                name: "{prop}",
                table: "YourTable",
                type: "nvarchar(max)",
                nullable: true);''')

            down_operations.append(f'''
            migrationBuilder.DropColumn(
                name: "{prop}",
                table: "YourTable");''')

        # Generate operations for removed properties
        for prop in changes["removed_properties"]:
            up_operations.append(f'''
            migrationBuilder.DropColumn(
                name: "{prop}",
                table: "YourTable");''')

            down_operations.append(f'''
            migrationBuilder.AddColumn<string>(
                name: "{prop}",
                table: "YourTable",
                type: "nvarchar(max)",
                nullable: true);''')

        migration_code = f'''using Microsoft.EntityFrameworkCore.Migrations;

namespace YourNamespace.Migrations
{{
    /// <autogenerated />
    public partial class {migration_name} : Migration
    {{
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {{{"".join(up_operations)}
        }}

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {{{"".join(down_operations)}
        }}
    }}
}}
'''

        return migration_code
